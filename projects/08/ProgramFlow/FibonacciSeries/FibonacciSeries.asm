// push argument 1@ARGA=MD=A@1A=D+AD=M@SPA=MM=D@SPM=M+1// pop pointer 1@3D=A@1D=D+A@R13M=D@SPM=M-1A=MD=M@R13A=MM=D// push constant 0// Push 0@0D=A@SPA=MM=D@SPM=M+1// pop that 0@THATA=MD=A@R13M=D@SPM=M-1A=MD=M@R13A=MM=D// push constant 1// Push 1@1D=A@SPA=MM=D@SPM=M+1// pop that 1@THATA=MD=A@1D=D+A@R13M=D@SPM=M-1A=MD=M@R13A=MM=D// push argument 0@ARGA=MD=M@SPA=MM=D@SPM=M+1// push constant 2// Push 2@2D=A@SPA=MM=D@SPM=M+1// sub// sub@SPA=MA=A-1D=MA=A-1M=M-D@SPM=M-1// pop argument 0@ARGA=MD=A@R13M=D@SPM=M-1A=MD=M@R13A=MM=D// (MAIN_LOOP_START)(MAIN_LOOP_START)// push argument 0@ARGA=MD=M@SPA=MM=D@SPM=M+1// if-goto COMPUTE_ELEMENT@SPM=M-1A=MD=M@COMPUTE_ELEMENTD;JNE// goto END_PROGRAM@END_PROGRAM0;JMP// (COMPUTE_ELEMENT)(COMPUTE_ELEMENT)// push that 0@THATA=MD=M@SPA=MM=D@SPM=M+1// push that 1@THATA=MD=A@1A=D+AD=M@SPA=MM=D@SPM=M+1// add// add@SPA=MA=A-1D=MA=A-1M=D+M@SPM=M-1// pop that 2@THATA=MD=A@2D=D+A@R13M=D@SPM=M-1A=MD=M@R13A=MM=D// push pointer 1@3D=A@1A=D+AD=M@SPA=MM=D@SPM=M+1// push constant 1// Push 1@1D=A@SPA=MM=D@SPM=M+1// add// add@SPA=MA=A-1D=MA=A-1M=D+M@SPM=M-1// pop pointer 1@3D=A@1D=D+A@R13M=D@SPM=M-1A=MD=M@R13A=MM=D// push argument 0@ARGA=MD=M@SPA=MM=D@SPM=M+1// push constant 1// Push 1@1D=A@SPA=MM=D@SPM=M+1// sub// sub@SPA=MA=A-1D=MA=A-1M=M-D@SPM=M-1// pop argument 0@ARGA=MD=A@R13M=D@SPM=M-1A=MD=M@R13A=MM=D// goto MAIN_LOOP_START@MAIN_LOOP_START0;JMP// (END_PROGRAM)(END_PROGRAM)