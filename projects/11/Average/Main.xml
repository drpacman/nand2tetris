<class><keyword> Class </keyword><identifier> Main </identifier><symbol> { </symbol><subroutineDec><keyword> Function </keyword><keyword> Void </keyword><identifier> main </identifier><symbol> ( </symbol><parameterList></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><varDec><keyword> Var </keyword><identifier> Array </identifier><identifier> a </identifier><symbol> ; </symbol></varDec><varDec><keyword> Var </keyword><keyword> Int </keyword><identifier> length </identifier><symbol> ; </symbol></varDec><varDec><keyword> Var </keyword><keyword> Int </keyword><identifier> i </identifier><symbol> , </symbol><identifier> sum </identifier><symbol> ; </symbol></varDec><statements><letStatement><keyword> Let </keyword><identifier> length </identifier><symbol> = </symbol><expression><term><identifier> Keyboard </identifier><symbol> . </symbol><identifier> readInt </identifier><symbol> ( </symbol><expressionList><expression><term><stringConstant> How many numbers?  </stringConstant></term></expression></expressionList><symbol> ) </symbol></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> Let </keyword><identifier> a </identifier><symbol> = </symbol><expression><term><identifier> Array </identifier><symbol> . </symbol><identifier> new </identifier><symbol> ( </symbol><expressionList><expression><term><identifier> length </identifier></term></expression></expressionList><symbol> ) </symbol></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> Let </keyword><identifier> i </identifier><symbol> = </symbol><expression><term><integerConstant> 0 </integerConstant></term></expression><symbol> ; </symbol></letStatement><whileStatement><keyword> While </keyword><symbol> ( </symbol><expression><term><identifier> i </identifier></term><symbol> &lt; </symbol><term><identifier> length </identifier></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><letStatement><keyword> Let </keyword><identifier> a </identifier><symbol> [ </symbol><expression><term><identifier> i </identifier></term></expression><symbol> ] </symbol><symbol> = </symbol><expression><term><identifier> Keyboard </identifier><symbol> . </symbol><identifier> readInt </identifier><symbol> ( </symbol><expressionList><expression><term><stringConstant> Enter a number:  </stringConstant></term></expression></expressionList><symbol> ) </symbol></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> Let </keyword><identifier> sum </identifier><symbol> = </symbol><expression><term><identifier> sum </identifier></term><symbol> + </symbol><term><identifier> a </identifier><symbol> [ </symbol><expression><term><identifier> i </identifier></term></expression><symbol> ] </symbol></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> Let </keyword><identifier> i </identifier><symbol> = </symbol><expression><term><identifier> i </identifier></term><symbol> + </symbol><term><integerConstant> 1 </integerConstant></term></expression><symbol> ; </symbol></letStatement></statements><symbol> } </symbol></whileStatement><doStatement><keyword> Do </keyword><identifier> Output </identifier><symbol> . </symbol><identifier> printString </identifier><symbol> ( </symbol><expressionList><expression><term><stringConstant> The average is  </stringConstant></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> Do </keyword><identifier> Output </identifier><symbol> . </symbol><identifier> printInt </identifier><symbol> ( </symbol><expressionList><expression><term><identifier> sum </identifier></term><symbol> / </symbol><term><identifier> length </identifier></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><returnStatement><keyword> Return </keyword><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><symbol> } </symbol></class>