<class><keyword> Class </keyword><identifier> Main </identifier><symbol> { </symbol><subroutineDec><keyword> Function </keyword><keyword> Void </keyword><identifier> main </identifier><symbol> ( </symbol><parameterList></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><varDec><keyword> Var </keyword><identifier> PongGame </identifier><identifier> game </identifier><symbol> ; </symbol></varDec><statements><doStatement><keyword> Do </keyword><identifier> PongGame </identifier><symbol> . </symbol><identifier> newInstance </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><letStatement><keyword> Let </keyword><identifier> game </identifier><symbol> = </symbol><expression><term><identifier> PongGame </identifier><symbol> . </symbol><identifier> getInstance </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol></term></expression><symbol> ; </symbol></letStatement><doStatement><keyword> Do </keyword><identifier> game </identifier><symbol> . </symbol><identifier> run </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> Do </keyword><identifier> game </identifier><symbol> . </symbol><identifier> dispose </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><returnStatement><keyword> Return </keyword><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><symbol> } </symbol></class>