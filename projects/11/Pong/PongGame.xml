<class><keyword> Class </keyword><identifier> PongGame </identifier><symbol> { </symbol><identifier> PongGame </identifier><identifier> instance </identifier><symbol> ; </symbol><identifier> Bat </identifier><identifier> bat </identifier><symbol> ; </symbol><identifier> Ball </identifier><identifier> ball </identifier><symbol> ; </symbol><keyword> Int </keyword><identifier> wall </identifier><symbol> ; </symbol><keyword> Boolean </keyword><identifier> exit </identifier><symbol> ; </symbol><keyword> Int </keyword><identifier> score </identifier><symbol> ; </symbol><keyword> Int </keyword><identifier> lastWall </identifier><symbol> ; </symbol><keyword> Int </keyword><identifier> batWidth </identifier><symbol> ; </symbol><subroutineDec><keyword> Constructor </keyword><identifier> PongGame </identifier><identifier> new </identifier><symbol> ( </symbol><parameterList></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><statements><doStatement><keyword> Do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> clearScreen </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><letStatement><keyword> Let </keyword><identifier> batWidth </identifier><symbol> = </symbol><expression><term><integerConstant> 50 </integerConstant></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> Let </keyword><identifier> bat </identifier><symbol> = </symbol><expression><term><identifier> Bat </identifier><symbol> . </symbol><identifier> new </identifier><symbol> ( </symbol><expressionList><expression><term><integerConstant> 230 </integerConstant></term></expression><symbol> , </symbol><expression><term><integerConstant> 229 </integerConstant></term></expression><symbol> , </symbol><expression><term><identifier> batWidth </identifier></term></expression><symbol> , </symbol><expression><term><integerConstant> 7 </integerConstant></term></expression></expressionList><symbol> ) </symbol></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> Let </keyword><identifier> ball </identifier><symbol> = </symbol><expression><term><identifier> Ball </identifier><symbol> . </symbol><identifier> new </identifier><symbol> ( </symbol><expressionList><expression><term><integerConstant> 253 </integerConstant></term></expression><symbol> , </symbol><expression><term><integerConstant> 222 </integerConstant></term></expression><symbol> , </symbol><expression><term><integerConstant> 0 </integerConstant></term></expression><symbol> , </symbol><expression><term><integerConstant> 511 </integerConstant></term></expression><symbol> , </symbol><expression><term><integerConstant> 0 </integerConstant></term></expression><symbol> , </symbol><expression><term><integerConstant> 229 </integerConstant></term></expression></expressionList><symbol> ) </symbol></term></expression><symbol> ; </symbol></letStatement><doStatement><keyword> Do </keyword><identifier> ball </identifier><symbol> . </symbol><identifier> setDestination </identifier><symbol> ( </symbol><expressionList><expression><term><integerConstant> 400 </integerConstant></term></expression><symbol> , </symbol><expression><term><integerConstant> 0 </integerConstant></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> Do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> drawRectangle </identifier><symbol> ( </symbol><expressionList><expression><term><integerConstant> 0 </integerConstant></term></expression><symbol> , </symbol><expression><term><integerConstant> 238 </integerConstant></term></expression><symbol> , </symbol><expression><term><integerConstant> 511 </integerConstant></term></expression><symbol> , </symbol><expression><term><integerConstant> 240 </integerConstant></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> Do </keyword><identifier> Output </identifier><symbol> . </symbol><identifier> moveCursor </identifier><symbol> ( </symbol><expressionList><expression><term><integerConstant> 22 </integerConstant></term></expression><symbol> , </symbol><expression><term><integerConstant> 0 </integerConstant></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> Do </keyword><identifier> Output </identifier><symbol> . </symbol><identifier> printString </identifier><symbol> ( </symbol><expressionList><expression><term><stringConstant> Score: 0 </stringConstant></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><letStatement><keyword> Let </keyword><identifier> exit </identifier><symbol> = </symbol><expression><term><keyword> False </keyword></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> Let </keyword><identifier> score </identifier><symbol> = </symbol><expression><term><integerConstant> 0 </integerConstant></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> Let </keyword><identifier> wall </identifier><symbol> = </symbol><expression><term><integerConstant> 0 </integerConstant></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> Let </keyword><identifier> lastWall </identifier><symbol> = </symbol><expression><term><integerConstant> 0 </integerConstant></term></expression><symbol> ; </symbol></letStatement><returnStatement><keyword> Return </keyword><expression><term><keyword> This </keyword></term></expression><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><subroutineDec><keyword> Method </keyword><keyword> Void </keyword><identifier> dispose </identifier><symbol> ( </symbol><parameterList></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><statements><doStatement><keyword> Do </keyword><identifier> bat </identifier><symbol> . </symbol><identifier> dispose </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> Do </keyword><identifier> ball </identifier><symbol> . </symbol><identifier> dispose </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> Do </keyword><identifier> Memory </identifier><symbol> . </symbol><identifier> deAlloc </identifier><symbol> ( </symbol><expressionList><expression><term><keyword> This </keyword></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><returnStatement><keyword> Return </keyword><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><subroutineDec><keyword> Function </keyword><keyword> Void </keyword><identifier> newInstance </identifier><symbol> ( </symbol><parameterList></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><statements><letStatement><keyword> Let </keyword><identifier> instance </identifier><symbol> = </symbol><expression><term><identifier> PongGame </identifier><symbol> . </symbol><identifier> new </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol></term></expression><symbol> ; </symbol></letStatement><returnStatement><keyword> Return </keyword><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><subroutineDec><keyword> Function </keyword><identifier> PongGame </identifier><identifier> getInstance </identifier><symbol> ( </symbol><parameterList></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><statements><returnStatement><keyword> Return </keyword><expression><term><identifier> instance </identifier></term></expression><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><subroutineDec><keyword> Method </keyword><keyword> Void </keyword><identifier> run </identifier><symbol> ( </symbol><parameterList></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><varDec><keyword> Var </keyword><keyword> Char </keyword><identifier> key </identifier><symbol> ; </symbol></varDec><statements><whileStatement><keyword> While </keyword><symbol> ( </symbol><expression><term><symbol> ~ </symbol><term><identifier> exit </identifier></term></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><whileStatement><keyword> While </keyword><symbol> ( </symbol><expression><term><expression><term><identifier> key </identifier></term><symbol> = </symbol><term><integerConstant> 0 </integerConstant></term></expression><symbol> ) </symbol></term><symbol> & </symbol><term><expression><term><symbol> ~ </symbol><term><identifier> exit </identifier></term></term></expression><symbol> ) </symbol></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><letStatement><keyword> Let </keyword><identifier> key </identifier><symbol> = </symbol><expression><term><identifier> Keyboard </identifier><symbol> . </symbol><identifier> keyPressed </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol></term></expression><symbol> ; </symbol></letStatement><doStatement><keyword> Do </keyword><identifier> bat </identifier><symbol> . </symbol><identifier> move </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> Do </keyword><identifier> moveBall </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> Do </keyword><identifier> Sys </identifier><symbol> . </symbol><identifier> wait </identifier><symbol> ( </symbol><expressionList><expression><term><integerConstant> 50 </integerConstant></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement></statements><symbol> } </symbol></whileStatement><keyword> If </keyword><symbol> ( </symbol><expression><term><identifier> key </identifier></term><symbol> = </symbol><term><integerConstant> 130 </integerConstant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><doStatement><keyword> Do </keyword><identifier> bat </identifier><symbol> . </symbol><identifier> setDirection </identifier><symbol> ( </symbol><expressionList><expression><term><integerConstant> 1 </integerConstant></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement></statements><symbol> } </symbol><keyword> Else </keyword><symbol> { </symbol><statements><keyword> If </keyword><symbol> ( </symbol><expression><term><identifier> key </identifier></term><symbol> = </symbol><term><integerConstant> 132 </integerConstant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><doStatement><keyword> Do </keyword><identifier> bat </identifier><symbol> . </symbol><identifier> setDirection </identifier><symbol> ( </symbol><expressionList><expression><term><integerConstant> 2 </integerConstant></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement></statements><symbol> } </symbol><keyword> Else </keyword><symbol> { </symbol><statements><keyword> If </keyword><symbol> ( </symbol><expression><term><identifier> key </identifier></term><symbol> = </symbol><term><integerConstant> 140 </integerConstant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><letStatement><keyword> Let </keyword><identifier> exit </identifier><symbol> = </symbol><expression><term><keyword> True </keyword></term></expression><symbol> ; </symbol></letStatement></statements><symbol> } </symbol></statements><symbol> } </symbol></statements><symbol> } </symbol><whileStatement><keyword> While </keyword><symbol> ( </symbol><expression><term><expression><term><symbol> ~ </symbol><term><expression><term><identifier> key </identifier></term><symbol> = </symbol><term><integerConstant> 0 </integerConstant></term></expression><symbol> ) </symbol></term></term></expression><symbol> ) </symbol></term><symbol> & </symbol><term><expression><term><symbol> ~ </symbol><term><identifier> exit </identifier></term></term></expression><symbol> ) </symbol></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><letStatement><keyword> Let </keyword><identifier> key </identifier><symbol> = </symbol><expression><term><identifier> Keyboard </identifier><symbol> . </symbol><identifier> keyPressed </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol></term></expression><symbol> ; </symbol></letStatement><doStatement><keyword> Do </keyword><identifier> bat </identifier><symbol> . </symbol><identifier> move </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> Do </keyword><identifier> moveBall </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> Do </keyword><identifier> Sys </identifier><symbol> . </symbol><identifier> wait </identifier><symbol> ( </symbol><expressionList><expression><term><integerConstant> 50 </integerConstant></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement></statements><symbol> } </symbol></whileStatement></statements><symbol> } </symbol></whileStatement><keyword> If </keyword><symbol> ( </symbol><expression><term><identifier> exit </identifier></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><doStatement><keyword> Do </keyword><identifier> Output </identifier><symbol> . </symbol><identifier> moveCursor </identifier><symbol> ( </symbol><expressionList><expression><term><integerConstant> 10 </integerConstant></term></expression><symbol> , </symbol><expression><term><integerConstant> 27 </integerConstant></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> Do </keyword><identifier> Output </identifier><symbol> . </symbol><identifier> printString </identifier><symbol> ( </symbol><expressionList><expression><term><stringConstant> Game Over </stringConstant></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement></statements><symbol> } </symbol><returnStatement><keyword> Return </keyword><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><subroutineDec><keyword> Method </keyword><keyword> Void </keyword><identifier> moveBall </identifier><symbol> ( </symbol><parameterList></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><varDec><keyword> Var </keyword><keyword> Int </keyword><identifier> bouncingDirection </identifier><symbol> , </symbol><identifier> batLeft </identifier><symbol> , </symbol><identifier> batRight </identifier><symbol> , </symbol><identifier> ballLeft </identifier><symbol> , </symbol><identifier> ballRight </identifier><symbol> ; </symbol></varDec><statements><letStatement><keyword> Let </keyword><identifier> wall </identifier><symbol> = </symbol><expression><term><identifier> ball </identifier><symbol> . </symbol><identifier> move </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol></term></expression><symbol> ; </symbol></letStatement><keyword> If </keyword><symbol> ( </symbol><expression><term><expression><term><identifier> wall </identifier></term><symbol> &gt; </symbol><term><integerConstant> 0 </integerConstant></term></expression><symbol> ) </symbol></term><symbol> & </symbol><term><expression><term><symbol> ~ </symbol><term><expression><term><identifier> wall </identifier></term><symbol> = </symbol><term><identifier> lastWall </identifier></term></expression><symbol> ) </symbol></term></term></expression><symbol> ) </symbol></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><letStatement><keyword> Let </keyword><identifier> lastWall </identifier><symbol> = </symbol><expression><term><identifier> wall </identifier></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> Let </keyword><identifier> bouncingDirection </identifier><symbol> = </symbol><expression><term><integerConstant> 0 </integerConstant></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> Let </keyword><identifier> batLeft </identifier><symbol> = </symbol><expression><term><identifier> bat </identifier><symbol> . </symbol><identifier> getLeft </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> Let </keyword><identifier> batRight </identifier><symbol> = </symbol><expression><term><identifier> bat </identifier><symbol> . </symbol><identifier> getRight </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> Let </keyword><identifier> ballLeft </identifier><symbol> = </symbol><expression><term><identifier> ball </identifier><symbol> . </symbol><identifier> getLeft </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> Let </keyword><identifier> ballRight </identifier><symbol> = </symbol><expression><term><identifier> ball </identifier><symbol> . </symbol><identifier> getRight </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol></term></expression><symbol> ; </symbol></letStatement><keyword> If </keyword><symbol> ( </symbol><expression><term><identifier> wall </identifier></term><symbol> = </symbol><term><integerConstant> 4 </integerConstant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><letStatement><keyword> Let </keyword><identifier> exit </identifier><symbol> = </symbol><expression><term><expression><term><identifier> batLeft </identifier></term><symbol> &gt; </symbol><term><identifier> ballRight </identifier></term></expression><symbol> ) </symbol></term><symbol> | </symbol><term><expression><term><identifier> batRight </identifier></term><symbol> &lt; </symbol><term><identifier> ballLeft </identifier></term></expression><symbol> ) </symbol></term></expression><symbol> ; </symbol></letStatement><keyword> If </keyword><symbol> ( </symbol><expression><term><symbol> ~ </symbol><term><identifier> exit </identifier></term></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><keyword> If </keyword><symbol> ( </symbol><expression><term><identifier> ballRight </identifier></term><symbol> &lt; </symbol><term><expression><term><identifier> batLeft </identifier></term><symbol> + </symbol><term><integerConstant> 10 </integerConstant></term></expression><symbol> ) </symbol></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><letStatement><keyword> Let </keyword><identifier> bouncingDirection </identifier><symbol> = </symbol><expression><term><symbol> - </symbol><term><integerConstant> 1 </integerConstant></term></term></expression><symbol> ; </symbol></letStatement></statements><symbol> } </symbol><keyword> Else </keyword><symbol> { </symbol><statements><keyword> If </keyword><symbol> ( </symbol><expression><term><identifier> ballLeft </identifier></term><symbol> &gt; </symbol><term><expression><term><identifier> batRight </identifier></term><symbol> - </symbol><term><integerConstant> 10 </integerConstant></term></expression><symbol> ) </symbol></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><letStatement><keyword> Let </keyword><identifier> bouncingDirection </identifier><symbol> = </symbol><expression><term><integerConstant> 1 </integerConstant></term></expression><symbol> ; </symbol></letStatement></statements><symbol> } </symbol></statements><symbol> } </symbol><letStatement><keyword> Let </keyword><identifier> batWidth </identifier><symbol> = </symbol><expression><term><identifier> batWidth </identifier></term><symbol> - </symbol><term><integerConstant> 2 </integerConstant></term></expression><symbol> ; </symbol></letStatement><doStatement><keyword> Do </keyword><identifier> bat </identifier><symbol> . </symbol><identifier> setWidth </identifier><symbol> ( </symbol><expressionList><expression><term><identifier> batWidth </identifier></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><letStatement><keyword> Let </keyword><identifier> score </identifier><symbol> = </symbol><expression><term><identifier> score </identifier></term><symbol> + </symbol><term><integerConstant> 1 </integerConstant></term></expression><symbol> ; </symbol></letStatement><doStatement><keyword> Do </keyword><identifier> Output </identifier><symbol> . </symbol><identifier> moveCursor </identifier><symbol> ( </symbol><expressionList><expression><term><integerConstant> 22 </integerConstant></term></expression><symbol> , </symbol><expression><term><integerConstant> 7 </integerConstant></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> Do </keyword><identifier> Output </identifier><symbol> . </symbol><identifier> printInt </identifier><symbol> ( </symbol><expressionList><expression><term><identifier> score </identifier></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement></statements><symbol> } </symbol></statements><symbol> } </symbol><doStatement><keyword> Do </keyword><identifier> ball </identifier><symbol> . </symbol><identifier> bounce </identifier><symbol> ( </symbol><expressionList><expression><term><identifier> bouncingDirection </identifier></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement></statements><symbol> } </symbol><returnStatement><keyword> Return </keyword><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><symbol> } </symbol></class>