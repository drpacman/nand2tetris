<class><keyword> Class </keyword><identifier> SquareGame </identifier><symbol> { </symbol><identifier> Square </identifier><identifier> square </identifier><symbol> ; </symbol><keyword> Int </keyword><identifier> direction </identifier><symbol> ; </symbol><subroutineDec><keyword> Constructor </keyword><identifier> SquareGame </identifier><identifier> new </identifier><symbol> ( </symbol><parameterList></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><statements><letStatement><keyword> Let </keyword><identifier> square </identifier><symbol> = </symbol><expression><term><identifier> Square </identifier><symbol> . </symbol><identifier> new </identifier><symbol> ( </symbol><expressionList><expression><term><integerConstant> 0 </integerConstant></term></expression><symbol> , </symbol><expression><term><integerConstant> 0 </integerConstant></term></expression><symbol> , </symbol><expression><term><integerConstant> 30 </integerConstant></term></expression></expressionList><symbol> ) </symbol></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> Let </keyword><identifier> direction </identifier><symbol> = </symbol><expression><term><integerConstant> 0 </integerConstant></term></expression><symbol> ; </symbol></letStatement><returnStatement><keyword> Return </keyword><expression><term><keyword> This </keyword></term></expression><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><subroutineDec><keyword> Method </keyword><keyword> Void </keyword><identifier> dispose </identifier><symbol> ( </symbol><parameterList></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><statements><doStatement><keyword> Do </keyword><identifier> square </identifier><symbol> . </symbol><identifier> dispose </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> Do </keyword><identifier> Memory </identifier><symbol> . </symbol><identifier> deAlloc </identifier><symbol> ( </symbol><expressionList><expression><term><keyword> This </keyword></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><returnStatement><keyword> Return </keyword><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><subroutineDec><keyword> Method </keyword><keyword> Void </keyword><identifier> moveSquare </identifier><symbol> ( </symbol><parameterList></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><statements><keyword> If </keyword><symbol> ( </symbol><expression><term><identifier> direction </identifier></term><symbol> = </symbol><term><integerConstant> 1 </integerConstant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><doStatement><keyword> Do </keyword><identifier> square </identifier><symbol> . </symbol><identifier> moveUp </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement></statements><symbol> } </symbol><keyword> If </keyword><symbol> ( </symbol><expression><term><identifier> direction </identifier></term><symbol> = </symbol><term><integerConstant> 2 </integerConstant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><doStatement><keyword> Do </keyword><identifier> square </identifier><symbol> . </symbol><identifier> moveDown </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement></statements><symbol> } </symbol><keyword> If </keyword><symbol> ( </symbol><expression><term><identifier> direction </identifier></term><symbol> = </symbol><term><integerConstant> 3 </integerConstant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><doStatement><keyword> Do </keyword><identifier> square </identifier><symbol> . </symbol><identifier> moveLeft </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement></statements><symbol> } </symbol><keyword> If </keyword><symbol> ( </symbol><expression><term><identifier> direction </identifier></term><symbol> = </symbol><term><integerConstant> 4 </integerConstant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><doStatement><keyword> Do </keyword><identifier> square </identifier><symbol> . </symbol><identifier> moveRight </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement></statements><symbol> } </symbol><doStatement><keyword> Do </keyword><identifier> Sys </identifier><symbol> . </symbol><identifier> wait </identifier><symbol> ( </symbol><expressionList><expression><term><integerConstant> 5 </integerConstant></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><returnStatement><keyword> Return </keyword><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><subroutineDec><keyword> Method </keyword><keyword> Void </keyword><identifier> run </identifier><symbol> ( </symbol><parameterList></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><varDec><keyword> Var </keyword><keyword> Char </keyword><identifier> key </identifier><symbol> ; </symbol></varDec><varDec><keyword> Var </keyword><keyword> Boolean </keyword><identifier> exit </identifier><symbol> ; </symbol></varDec><statements><letStatement><keyword> Let </keyword><identifier> exit </identifier><symbol> = </symbol><expression><term><keyword> False </keyword></term></expression><symbol> ; </symbol></letStatement><whileStatement><keyword> While </keyword><symbol> ( </symbol><expression><term><symbol> ~ </symbol><term><identifier> exit </identifier></term></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><whileStatement><keyword> While </keyword><symbol> ( </symbol><expression><term><identifier> key </identifier></term><symbol> = </symbol><term><integerConstant> 0 </integerConstant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><letStatement><keyword> Let </keyword><identifier> key </identifier><symbol> = </symbol><expression><term><identifier> Keyboard </identifier><symbol> . </symbol><identifier> keyPressed </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol></term></expression><symbol> ; </symbol></letStatement><doStatement><keyword> Do </keyword><identifier> moveSquare </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement></statements><symbol> } </symbol></whileStatement><keyword> If </keyword><symbol> ( </symbol><expression><term><identifier> key </identifier></term><symbol> = </symbol><term><integerConstant> 81 </integerConstant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><letStatement><keyword> Let </keyword><identifier> exit </identifier><symbol> = </symbol><expression><term><keyword> True </keyword></term></expression><symbol> ; </symbol></letStatement></statements><symbol> } </symbol><keyword> If </keyword><symbol> ( </symbol><expression><term><identifier> key </identifier></term><symbol> = </symbol><term><integerConstant> 90 </integerConstant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><doStatement><keyword> Do </keyword><identifier> square </identifier><symbol> . </symbol><identifier> decSize </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement></statements><symbol> } </symbol><keyword> If </keyword><symbol> ( </symbol><expression><term><identifier> key </identifier></term><symbol> = </symbol><term><integerConstant> 88 </integerConstant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><doStatement><keyword> Do </keyword><identifier> square </identifier><symbol> . </symbol><identifier> incSize </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement></statements><symbol> } </symbol><keyword> If </keyword><symbol> ( </symbol><expression><term><identifier> key </identifier></term><symbol> = </symbol><term><integerConstant> 131 </integerConstant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><letStatement><keyword> Let </keyword><identifier> direction </identifier><symbol> = </symbol><expression><term><integerConstant> 1 </integerConstant></term></expression><symbol> ; </symbol></letStatement></statements><symbol> } </symbol><keyword> If </keyword><symbol> ( </symbol><expression><term><identifier> key </identifier></term><symbol> = </symbol><term><integerConstant> 133 </integerConstant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><letStatement><keyword> Let </keyword><identifier> direction </identifier><symbol> = </symbol><expression><term><integerConstant> 2 </integerConstant></term></expression><symbol> ; </symbol></letStatement></statements><symbol> } </symbol><keyword> If </keyword><symbol> ( </symbol><expression><term><identifier> key </identifier></term><symbol> = </symbol><term><integerConstant> 130 </integerConstant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><letStatement><keyword> Let </keyword><identifier> direction </identifier><symbol> = </symbol><expression><term><integerConstant> 3 </integerConstant></term></expression><symbol> ; </symbol></letStatement></statements><symbol> } </symbol><keyword> If </keyword><symbol> ( </symbol><expression><term><identifier> key </identifier></term><symbol> = </symbol><term><integerConstant> 132 </integerConstant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><letStatement><keyword> Let </keyword><identifier> direction </identifier><symbol> = </symbol><expression><term><integerConstant> 4 </integerConstant></term></expression><symbol> ; </symbol></letStatement></statements><symbol> } </symbol><whileStatement><keyword> While </keyword><symbol> ( </symbol><expression><term><symbol> ~ </symbol><term><expression><term><identifier> key </identifier></term><symbol> = </symbol><term><integerConstant> 0 </integerConstant></term></expression><symbol> ) </symbol></term></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><letStatement><keyword> Let </keyword><identifier> key </identifier><symbol> = </symbol><expression><term><identifier> Keyboard </identifier><symbol> . </symbol><identifier> keyPressed </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol></term></expression><symbol> ; </symbol></letStatement><doStatement><keyword> Do </keyword><identifier> moveSquare </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement></statements><symbol> } </symbol></whileStatement></statements><symbol> } </symbol></whileStatement><returnStatement><keyword> Return </keyword><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><symbol> } </symbol></class>