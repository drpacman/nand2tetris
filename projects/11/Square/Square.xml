<class><keyword> Class </keyword><identifier> Square </identifier><symbol> { </symbol><keyword> Int </keyword><identifier> x </identifier><symbol> , </symbol><identifier> y </identifier><symbol> ; </symbol><keyword> Int </keyword><identifier> size </identifier><symbol> ; </symbol><subroutineDec><keyword> Constructor </keyword><identifier> Square </identifier><identifier> new </identifier><symbol> ( </symbol><parameterList><keyword> Int </keyword><identifier> Ax </identifier><symbol> , </symbol><keyword> Int </keyword><identifier> Ay </identifier><symbol> , </symbol><keyword> Int </keyword><identifier> Asize </identifier></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><statements><letStatement><keyword> Let </keyword><identifier> x </identifier><symbol> = </symbol><expression><term><identifier> Ax </identifier></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> Let </keyword><identifier> y </identifier><symbol> = </symbol><expression><term><identifier> Ay </identifier></term></expression><symbol> ; </symbol></letStatement><letStatement><keyword> Let </keyword><identifier> size </identifier><symbol> = </symbol><expression><term><identifier> Asize </identifier></term></expression><symbol> ; </symbol></letStatement><doStatement><keyword> Do </keyword><identifier> draw </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><returnStatement><keyword> Return </keyword><expression><term><keyword> This </keyword></term></expression><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><subroutineDec><keyword> Method </keyword><keyword> Void </keyword><identifier> dispose </identifier><symbol> ( </symbol><parameterList></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><statements><doStatement><keyword> Do </keyword><identifier> Memory </identifier><symbol> . </symbol><identifier> deAlloc </identifier><symbol> ( </symbol><expressionList><expression><term><keyword> This </keyword></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><returnStatement><keyword> Return </keyword><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><subroutineDec><keyword> Method </keyword><keyword> Void </keyword><identifier> draw </identifier><symbol> ( </symbol><parameterList></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><statements><doStatement><keyword> Do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> setColor </identifier><symbol> ( </symbol><expressionList><expression><term><keyword> True </keyword></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> Do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> drawRectangle </identifier><symbol> ( </symbol><expressionList><expression><term><identifier> x </identifier></term></expression><symbol> , </symbol><expression><term><identifier> y </identifier></term></expression><symbol> , </symbol><expression><term><identifier> x </identifier></term><symbol> + </symbol><term><identifier> size </identifier></term></expression><symbol> , </symbol><expression><term><identifier> y </identifier></term><symbol> + </symbol><term><identifier> size </identifier></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><returnStatement><keyword> Return </keyword><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><subroutineDec><keyword> Method </keyword><keyword> Void </keyword><identifier> erase </identifier><symbol> ( </symbol><parameterList></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><statements><doStatement><keyword> Do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> setColor </identifier><symbol> ( </symbol><expressionList><expression><term><keyword> False </keyword></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> Do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> drawRectangle </identifier><symbol> ( </symbol><expressionList><expression><term><identifier> x </identifier></term></expression><symbol> , </symbol><expression><term><identifier> y </identifier></term></expression><symbol> , </symbol><expression><term><identifier> x </identifier></term><symbol> + </symbol><term><identifier> size </identifier></term></expression><symbol> , </symbol><expression><term><identifier> y </identifier></term><symbol> + </symbol><term><identifier> size </identifier></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><returnStatement><keyword> Return </keyword><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><subroutineDec><keyword> Method </keyword><keyword> Void </keyword><identifier> incSize </identifier><symbol> ( </symbol><parameterList></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><statements><keyword> If </keyword><symbol> ( </symbol><expression><term><expression><term><expression><term><identifier> y </identifier></term><symbol> + </symbol><term><identifier> size </identifier></term></expression><symbol> ) </symbol></term><symbol> &lt; </symbol><term><integerConstant> 254 </integerConstant></term></expression><symbol> ) </symbol></term><symbol> & </symbol><term><expression><term><expression><term><identifier> x </identifier></term><symbol> + </symbol><term><identifier> size </identifier></term></expression><symbol> ) </symbol></term><symbol> &lt; </symbol><term><integerConstant> 510 </integerConstant></term></expression><symbol> ) </symbol></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><doStatement><keyword> Do </keyword><identifier> erase </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><letStatement><keyword> Let </keyword><identifier> size </identifier><symbol> = </symbol><expression><term><identifier> size </identifier></term><symbol> + </symbol><term><integerConstant> 2 </integerConstant></term></expression><symbol> ; </symbol></letStatement><doStatement><keyword> Do </keyword><identifier> draw </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement></statements><symbol> } </symbol><returnStatement><keyword> Return </keyword><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><subroutineDec><keyword> Method </keyword><keyword> Void </keyword><identifier> decSize </identifier><symbol> ( </symbol><parameterList></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><statements><keyword> If </keyword><symbol> ( </symbol><expression><term><identifier> size </identifier></term><symbol> &gt; </symbol><term><integerConstant> 2 </integerConstant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><doStatement><keyword> Do </keyword><identifier> erase </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><letStatement><keyword> Let </keyword><identifier> size </identifier><symbol> = </symbol><expression><term><identifier> size </identifier></term><symbol> - </symbol><term><integerConstant> 2 </integerConstant></term></expression><symbol> ; </symbol></letStatement><doStatement><keyword> Do </keyword><identifier> draw </identifier><symbol> ( </symbol><expressionList></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement></statements><symbol> } </symbol><returnStatement><keyword> Return </keyword><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><subroutineDec><keyword> Method </keyword><keyword> Void </keyword><identifier> moveUp </identifier><symbol> ( </symbol><parameterList></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><statements><keyword> If </keyword><symbol> ( </symbol><expression><term><identifier> y </identifier></term><symbol> &gt; </symbol><term><integerConstant> 1 </integerConstant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><doStatement><keyword> Do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> setColor </identifier><symbol> ( </symbol><expressionList><expression><term><keyword> False </keyword></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> Do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> drawRectangle </identifier><symbol> ( </symbol><expressionList><expression><term><identifier> x </identifier></term></expression><symbol> , </symbol><expression><term><expression><term><identifier> y </identifier></term><symbol> + </symbol><term><identifier> size </identifier></term></expression><symbol> ) </symbol></term><symbol> - </symbol><term><integerConstant> 1 </integerConstant></term></expression><symbol> , </symbol><expression><term><identifier> x </identifier></term><symbol> + </symbol><term><identifier> size </identifier></term></expression><symbol> , </symbol><expression><term><identifier> y </identifier></term><symbol> + </symbol><term><identifier> size </identifier></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><letStatement><keyword> Let </keyword><identifier> y </identifier><symbol> = </symbol><expression><term><identifier> y </identifier></term><symbol> - </symbol><term><integerConstant> 2 </integerConstant></term></expression><symbol> ; </symbol></letStatement><doStatement><keyword> Do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> setColor </identifier><symbol> ( </symbol><expressionList><expression><term><keyword> True </keyword></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> Do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> drawRectangle </identifier><symbol> ( </symbol><expressionList><expression><term><identifier> x </identifier></term></expression><symbol> , </symbol><expression><term><identifier> y </identifier></term></expression><symbol> , </symbol><expression><term><identifier> x </identifier></term><symbol> + </symbol><term><identifier> size </identifier></term></expression><symbol> , </symbol><expression><term><identifier> y </identifier></term><symbol> + </symbol><term><integerConstant> 1 </integerConstant></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement></statements><symbol> } </symbol><returnStatement><keyword> Return </keyword><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><subroutineDec><keyword> Method </keyword><keyword> Void </keyword><identifier> moveDown </identifier><symbol> ( </symbol><parameterList></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><statements><keyword> If </keyword><symbol> ( </symbol><expression><term><expression><term><identifier> y </identifier></term><symbol> + </symbol><term><identifier> size </identifier></term></expression><symbol> ) </symbol></term><symbol> &lt; </symbol><term><integerConstant> 254 </integerConstant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><doStatement><keyword> Do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> setColor </identifier><symbol> ( </symbol><expressionList><expression><term><keyword> False </keyword></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> Do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> drawRectangle </identifier><symbol> ( </symbol><expressionList><expression><term><identifier> x </identifier></term></expression><symbol> , </symbol><expression><term><identifier> y </identifier></term></expression><symbol> , </symbol><expression><term><identifier> x </identifier></term><symbol> + </symbol><term><identifier> size </identifier></term></expression><symbol> , </symbol><expression><term><identifier> y </identifier></term><symbol> + </symbol><term><integerConstant> 1 </integerConstant></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><letStatement><keyword> Let </keyword><identifier> y </identifier><symbol> = </symbol><expression><term><identifier> y </identifier></term><symbol> + </symbol><term><integerConstant> 2 </integerConstant></term></expression><symbol> ; </symbol></letStatement><doStatement><keyword> Do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> setColor </identifier><symbol> ( </symbol><expressionList><expression><term><keyword> True </keyword></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> Do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> drawRectangle </identifier><symbol> ( </symbol><expressionList><expression><term><identifier> x </identifier></term></expression><symbol> , </symbol><expression><term><expression><term><identifier> y </identifier></term><symbol> + </symbol><term><identifier> size </identifier></term></expression><symbol> ) </symbol></term><symbol> - </symbol><term><integerConstant> 1 </integerConstant></term></expression><symbol> , </symbol><expression><term><identifier> x </identifier></term><symbol> + </symbol><term><identifier> size </identifier></term></expression><symbol> , </symbol><expression><term><identifier> y </identifier></term><symbol> + </symbol><term><identifier> size </identifier></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement></statements><symbol> } </symbol><returnStatement><keyword> Return </keyword><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><subroutineDec><keyword> Method </keyword><keyword> Void </keyword><identifier> moveLeft </identifier><symbol> ( </symbol><parameterList></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><statements><keyword> If </keyword><symbol> ( </symbol><expression><term><identifier> x </identifier></term><symbol> &gt; </symbol><term><integerConstant> 1 </integerConstant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><doStatement><keyword> Do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> setColor </identifier><symbol> ( </symbol><expressionList><expression><term><keyword> False </keyword></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> Do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> drawRectangle </identifier><symbol> ( </symbol><expressionList><expression><term><expression><term><identifier> x </identifier></term><symbol> + </symbol><term><identifier> size </identifier></term></expression><symbol> ) </symbol></term><symbol> - </symbol><term><integerConstant> 1 </integerConstant></term></expression><symbol> , </symbol><expression><term><identifier> y </identifier></term></expression><symbol> , </symbol><expression><term><identifier> x </identifier></term><symbol> + </symbol><term><identifier> size </identifier></term></expression><symbol> , </symbol><expression><term><identifier> y </identifier></term><symbol> + </symbol><term><identifier> size </identifier></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><letStatement><keyword> Let </keyword><identifier> x </identifier><symbol> = </symbol><expression><term><identifier> x </identifier></term><symbol> - </symbol><term><integerConstant> 2 </integerConstant></term></expression><symbol> ; </symbol></letStatement><doStatement><keyword> Do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> setColor </identifier><symbol> ( </symbol><expressionList><expression><term><keyword> True </keyword></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> Do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> drawRectangle </identifier><symbol> ( </symbol><expressionList><expression><term><identifier> x </identifier></term></expression><symbol> , </symbol><expression><term><identifier> y </identifier></term></expression><symbol> , </symbol><expression><term><identifier> x </identifier></term><symbol> + </symbol><term><integerConstant> 1 </integerConstant></term></expression><symbol> , </symbol><expression><term><identifier> y </identifier></term><symbol> + </symbol><term><identifier> size </identifier></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement></statements><symbol> } </symbol><returnStatement><keyword> Return </keyword><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><subroutineDec><keyword> Method </keyword><keyword> Void </keyword><identifier> moveRight </identifier><symbol> ( </symbol><parameterList></parameterList><symbol> ) </symbol><subroutineBody><symbol> { </symbol><statements><keyword> If </keyword><symbol> ( </symbol><expression><term><expression><term><identifier> x </identifier></term><symbol> + </symbol><term><identifier> size </identifier></term></expression><symbol> ) </symbol></term><symbol> &lt; </symbol><term><integerConstant> 510 </integerConstant></term></expression><symbol> ) </symbol><symbol> { </symbol><statements><doStatement><keyword> Do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> setColor </identifier><symbol> ( </symbol><expressionList><expression><term><keyword> False </keyword></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> Do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> drawRectangle </identifier><symbol> ( </symbol><expressionList><expression><term><identifier> x </identifier></term></expression><symbol> , </symbol><expression><term><identifier> y </identifier></term></expression><symbol> , </symbol><expression><term><identifier> x </identifier></term><symbol> + </symbol><term><integerConstant> 1 </integerConstant></term></expression><symbol> , </symbol><expression><term><identifier> y </identifier></term><symbol> + </symbol><term><identifier> size </identifier></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><letStatement><keyword> Let </keyword><identifier> x </identifier><symbol> = </symbol><expression><term><identifier> x </identifier></term><symbol> + </symbol><term><integerConstant> 2 </integerConstant></term></expression><symbol> ; </symbol></letStatement><doStatement><keyword> Do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> setColor </identifier><symbol> ( </symbol><expressionList><expression><term><keyword> True </keyword></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement><doStatement><keyword> Do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> drawRectangle </identifier><symbol> ( </symbol><expressionList><expression><term><expression><term><identifier> x </identifier></term><symbol> + </symbol><term><identifier> size </identifier></term></expression><symbol> ) </symbol></term><symbol> - </symbol><term><integerConstant> 1 </integerConstant></term></expression><symbol> , </symbol><expression><term><identifier> y </identifier></term></expression><symbol> , </symbol><expression><term><identifier> x </identifier></term><symbol> + </symbol><term><identifier> size </identifier></term></expression><symbol> , </symbol><expression><term><identifier> y </identifier></term><symbol> + </symbol><term><identifier> size </identifier></term></expression></expressionList><symbol> ) </symbol><symbol> ; </symbol></doStatement></statements><symbol> } </symbol><returnStatement><keyword> Return </keyword><symbol> ; </symbol></returnStatement></statements><symbol> } </symbol></subroutineBody></subroutineDec><symbol> } </symbol></class>